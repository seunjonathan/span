{
	"name": "PL_TOPS_Bronze2Silver",
	"properties": {
		"description": "This pipeline procures raw data from the TOPS pipeline and curates it into a silver layer in Delta format.\n\nIt uses the cfgBronze table store.\nTOPSv2 is the partition key.",
		"activities": [
			{
				"name": "Get Configs for tables with LastUpdate_ts",
				"description": "This activity reads the configuration from the cfgBronze ATS for partition TOPSv2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Current Hour",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureTableSource",
						"azureTableSourceQuery": {
							"value": "PartitionKey eq 'TOPSv2' and Skip_Flag eq false and Watermark_Column eq 'LastUpdate_ts'",
							"type": "Expression"
						},
						"azureTableSourceIgnoreTableNotFound": false
					},
					"dataset": {
						"referenceName": "DS_cfgBronze_ATS",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_Incremental LastUpdate_ts tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ForEach - Create Array of LastUpdate_ts",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Configs for tables with LastUpdate_ts').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "If Max of LastUpdate_ts more than last watermark",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(greater(int(split(split(string(variables('vnext_Watermark_End_LastUpdate_ts_Tables')), concat('\"',item().RowKey,'\":'))[1],'}')[0])\n, int(item().Watermark_End)),if(greater(length(string(item().Schedule)), 0),\n         contains(string(item().Schedule),variables('vCurrentHour')),true),false)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Incremental Load",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "SELECT @{item().Source_Fields} FROM @{pipeline().parameters.Source_Schema}.[@{item().RowKey}] where CAST(LastUpdate_ts AS int) > @{item().Watermark_End}",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_TOPS_SQL",
												"type": "DatasetReference",
												"parameters": {
													"Server": {
														"value": "@pipeline().parameters.Server",
														"type": "Expression"
													},
													"Database": {
														"value": "@pipeline().parameters.Database",
														"type": "Expression"
													},
													"pUsername": {
														"value": "@pipeline().parameters.pUsername",
														"type": "Expression"
													},
													"pSecretname": {
														"value": "@pipeline().parameters.pSecretname",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_TOPS_Bronze_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pFileName": {
														"value": "@concat(item().RowKey, '_', formatDateTime(addhours(utcnow(),-8), 'yyyy'), formatDateTime(addhours(utcnow(),-8), 'MM'), formatDateTime(addhours(utcnow(),-8), 'dd'),'_' , formatDateTime(addhours(utcnow(),-8), 'HH'), formatDateTime(addhours(utcnow(),-8), 'mm'), formatDateTime(addhours(utcnow(),-8), 'ss'), '.parquet')",
														"type": "Expression"
													},
													"pDirectory": {
														"value": "@item().RowKey",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Update Watermark_End",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Curate Parquet",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureTableSource",
												"additionalColumns": [
													{
														"name": "vnext_Watermark_End",
														"value": {
															"value": "@split(split(string(variables('vnext_Watermark_End_LastUpdate_ts_Tables')), concat('\"',item().RowKey,'\":'))[1],'}')[0]",
															"type": "Expression"
														}
													}
												],
												"azureTableSourceQuery": {
													"value": "PartitionKey eq '@{item().PartitionKey}' and RowKey eq '@{item().RowKey}'",
													"type": "Expression"
												},
												"azureTableSourceIgnoreTableNotFound": false
											},
											"sink": {
												"type": "AzureTableSink",
												"azureTableInsertType": "merge",
												"azureTablePartitionKeyName": {
													"value": "PartitionKey",
													"type": "Expression"
												},
												"azureTableRowKeyName": {
													"value": "RowKey",
													"type": "Expression"
												},
												"writeBatchSize": 10000
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"mappings": [
													{
														"source": {
															"name": "PartitionKey",
															"type": "String"
														},
														"sink": {
															"name": "PartitionKey",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "RowKey",
															"type": "String"
														},
														"sink": {
															"name": "RowKey",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "vnext_Watermark_End",
															"type": "String"
														},
														"sink": {
															"name": "Watermark_End",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "QueryParameter",
															"type": "String"
														},
														"sink": {
															"name": "QueryParameter",
															"type": "String"
														}
													}
												],
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_cfgBronze_ATS",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "DS_cfgBronze_ATS",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Curate Parquet",
										"description": "This pyspark script will copy incoming parquet file, rename and upsert it into delta lake.",
										"type": "DatabricksSparkPython",
										"dependsOn": [
											{
												"activity": "Incremental Load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pythonFile": "dbfs:/FileStore/pyspark-scripts/curate_parquet.py",
											"parameters": [
												"@concat('-t',item().RowKey)",
												"-sbronze",
												"-dsilver",
												"@concat('-v',item().PartitionKey)",
												"@concat('-k',item().Primary_Key)",
												"@concat('-j',item().Renaming_Instructions)",
												"@concat('-i',item().Incremental)",
												"@concat('-a',item().Validation_Instructions)"
											]
										},
										"linkedServiceName": {
											"referenceName": "LS_SMG_DBW",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Archive RAW Parquet",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Curate Parquet",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "ParquetSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"wildcardFolderPath": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													},
													"wildcardFileName": "*.parquet",
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "ParquetReadSettings"
												}
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "processed",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Delete RAW Parquet",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Archive RAW Parquet",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Get Configs for tables with other timestamps column",
				"description": "This activity reads the configuration from the cfgBronze ATS for partition TOPSv2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Current Hour",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureTableSource",
						"azureTableSourceQuery": {
							"value": "PartitionKey eq 'TOPSv2' and Skip_Flag eq false and Watermark_Column ne 'None' and Watermark_Column ne 'LastUpdate_ts'",
							"type": "Expression"
						},
						"azureTableSourceIgnoreTableNotFound": false
					},
					"dataset": {
						"referenceName": "DS_cfgBronze_ATS",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach - Create Array of LastUpdate_ts",
				"description": "This activity get the max of LastUpdate_ts for each table concerned and inserts as an entry into an array",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Configs for tables with LastUpdate_ts",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Configs for tables with LastUpdate_ts').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookup Next Watermark Value",
							"description": "This activity gets the maximum value of LastUpdate_ts as the next watermark value.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT max(CAST(LastUpdate_ts AS int)) AS @{item().RowKey}  FROM @{pipeline().parameters.Source_Schema}.[@{item().RowKey}]",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_TOPS_SQL",
									"type": "DatasetReference",
									"parameters": {
										"Server": "van-ss-sql15ag.seaspan.com",
										"Database": "TOPSSEASPAN_PROD",
										"pUsername": "PowerBIReader_SMCBITeam",
										"pSecretname": "TOPS-Password"
									}
								}
							}
						},
						{
							"name": "Append variable Array",
							"description": "This creates an array variable storing all the watermarks of the tables.",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "Lookup Next Watermark Value",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "vnext_Watermark_End_LastUpdate_ts_Tables",
								"value": {
									"value": "@activity('Lookup Next Watermark Value').output.firstRow",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ForEach_Incremental Other Tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ForEach - Create Array of Other timestamp columns",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Configs for tables with other timestamps column').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "If Max of timestamp column than last watermark_copy1",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(\n\tgreater(split(split(string(variables('vnext_Watermark_End_Other_Tables')), concat('\"',item().RowKey,'\":\"'))[1],'\"}')[0], item().Watermark_End),\n\tif(contains(item(),'Schedule'),\t\n\t\tif(greater(length(string(item().Schedule)), 0),\n         \t\tcontains(string(item().Schedule),variables('vCurrentHour')),\n\t\t\ttrue),\t \n\t\ttrue),\t\n\tfalse)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Incremental Load Other tables",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "SELECT @{item().Source_Fields} FROM @{pipeline().parameters.Source_Schema}.[@{item().RowKey}] where @{item().Watermark_Column} > '@{item().Watermark_End}'",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_TOPS_SQL",
												"type": "DatasetReference",
												"parameters": {
													"Server": {
														"value": "@pipeline().parameters.Server",
														"type": "Expression"
													},
													"Database": {
														"value": "@pipeline().parameters.Database",
														"type": "Expression"
													},
													"pUsername": {
														"value": "@pipeline().parameters.pUsername",
														"type": "Expression"
													},
													"pSecretname": {
														"value": "@pipeline().parameters.pSecretname",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_TOPS_Bronze_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pFileName": {
														"value": "@concat(item().RowKey, '_', formatDateTime(addhours(utcnow(),-8), 'yyyy'), formatDateTime(addhours(utcnow(),-8), 'MM'), formatDateTime(addhours(utcnow(),-8), 'dd'),'_' , formatDateTime(addhours(utcnow(),-8), 'HH'), formatDateTime(addhours(utcnow(),-8), 'mm'), formatDateTime(addhours(utcnow(),-8), 'ss'), '.parquet')",
														"type": "Expression"
													},
													"pDirectory": {
														"value": "@item().RowKey",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Update Watermark_End Other tables",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Curate Parquet other tables",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureTableSource",
												"additionalColumns": [
													{
														"name": "vnext_Watermark_End",
														"value": {
															"value": "@split(split(string(variables('vnext_Watermark_End_Other_Tables')), concat('\"',item().RowKey,'\":\"'))[1],'\"}')[0]",
															"type": "Expression"
														}
													}
												],
												"azureTableSourceQuery": {
													"value": "PartitionKey eq '@{item().PartitionKey}' and RowKey eq '@{item().RowKey}'",
													"type": "Expression"
												},
												"azureTableSourceIgnoreTableNotFound": false
											},
											"sink": {
												"type": "AzureTableSink",
												"azureTableInsertType": "merge",
												"azureTablePartitionKeyName": {
													"value": "PartitionKey",
													"type": "Expression"
												},
												"azureTableRowKeyName": {
													"value": "RowKey",
													"type": "Expression"
												},
												"writeBatchSize": 10000
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"mappings": [
													{
														"source": {
															"name": "PartitionKey",
															"type": "String"
														},
														"sink": {
															"name": "PartitionKey",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "RowKey",
															"type": "String"
														},
														"sink": {
															"name": "RowKey",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "vnext_Watermark_End",
															"type": "String"
														},
														"sink": {
															"name": "Watermark_End",
															"type": "String"
														}
													},
													{
														"source": {
															"name": "QueryParameter",
															"type": "String"
														},
														"sink": {
															"name": "QueryParameter",
															"type": "String"
														}
													}
												],
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_cfgBronze_ATS",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "DS_cfgBronze_ATS",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Curate Parquet other tables",
										"description": "This pyspark script will copy incoming parquet file, rename and upsert it into delta lake.",
										"type": "DatabricksSparkPython",
										"dependsOn": [
											{
												"activity": "Incremental Load Other tables",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pythonFile": "dbfs:/FileStore/pyspark-scripts/curate_parquet.py",
											"parameters": [
												"@concat('-t',item().RowKey)",
												"-sbronze",
												"-dsilver",
												"@concat('-v',item().PartitionKey)",
												"@concat('-k',item().Primary_Key)",
												"@concat('-j',item().Renaming_Instructions)",
												"@concat('-i',item().Incremental)",
												"@concat('-a',item().Validation_Instructions)"
											]
										},
										"linkedServiceName": {
											"referenceName": "LS_SMG_DBW",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Archive RAW Parquet other tables",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Curate Parquet other tables",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "ParquetSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"wildcardFolderPath": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													},
													"wildcardFileName": "*.parquet",
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "ParquetReadSettings"
												}
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "processed",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Delete RAW Parquet other tables",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Archive RAW Parquet other tables",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "ForEach - Create Array of Other timestamp columns",
				"description": "This activity get the max of other timestamp column for each table concerned and inserts as an entry into an array",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Configs for tables with other timestamps column",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Configs for tables with other timestamps column').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookup Next Watermark Value Other Tables",
							"description": "This activity gets the maximum value of the timestamp column as the next watermark value.",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT max(@{item().Watermark_Column}) AS @{item().RowKey}  FROM @{pipeline().parameters.Source_Schema}.[@{item().RowKey}]",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_TOPS_SQL",
									"type": "DatasetReference",
									"parameters": {
										"Server": "van-ss-sql15ag.seaspan.com",
										"Database": "TOPSSEASPAN_PROD",
										"pUsername": "PowerBIReader_SMCBITeam",
										"pSecretname": "TOPS-Password"
									}
								}
							}
						},
						{
							"name": "Append variable Array for Other Incremental tables",
							"description": "This creates an array variable storing all the watermarks of the tables.",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "Lookup Next Watermark Value Other Tables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "vnext_Watermark_End_Other_Tables",
								"value": {
									"value": "@activity('Lookup Next Watermark Value Other Tables').output.firstRow",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Get Configs for tables with No watermark column",
				"description": "This activity reads the configuration from the cfgBronze ATS for partition TOPSv2",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Current Hour",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureTableSource",
						"azureTableSourceQuery": {
							"value": "PartitionKey eq 'TOPSv2' and Skip_Flag eq false and Watermark_Column eq 'None'",
							"type": "Expression"
						},
						"azureTableSourceIgnoreTableNotFound": false
					},
					"dataset": {
						"referenceName": "DS_cfgBronze_ATS",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach_Full load tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Configs for tables with No watermark column",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Configs for tables with No watermark column').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "If Condition",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(greater(length(string(item().Schedule)), 0),\n            contains(\n                string(item().Schedule),\n                variables('vCurrentHour')\n            ),\n        true\n        )",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Full Load",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": {
													"value": "SELECT @{item().Source_Fields} FROM @{pipeline().parameters.Source_Schema}.[@{item().RowKey}]",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_TOPS_SQL",
												"type": "DatasetReference",
												"parameters": {
													"Server": {
														"value": "@pipeline().parameters.Server",
														"type": "Expression"
													},
													"Database": {
														"value": "@pipeline().parameters.Database",
														"type": "Expression"
													},
													"pUsername": {
														"value": "@pipeline().parameters.pUsername",
														"type": "Expression"
													},
													"pSecretname": {
														"value": "@pipeline().parameters.pSecretname",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_TOPS_Bronze_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pFileName": {
														"value": "@concat(item().RowKey, '_', formatDateTime(addhours(utcnow(),-8), 'yyyy'), formatDateTime(addhours(utcnow(),-8), 'MM'), formatDateTime(addhours(utcnow(),-8), 'dd'),'_' , formatDateTime(addhours(utcnow(),-8), 'HH'), formatDateTime(addhours(utcnow(),-8), 'mm'), formatDateTime(addhours(utcnow(),-8), 'ss'), '.parquet')",
														"type": "Expression"
													},
													"pDirectory": {
														"value": "@item().RowKey",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Curate Parquet Full Load",
										"description": "This pyspark script will copy incoming parquet file, rename and upsert it into delta lake.",
										"type": "DatabricksSparkPython",
										"dependsOn": [
											{
												"activity": "Full Load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pythonFile": "dbfs:/FileStore/pyspark-scripts/curate_parquet.py",
											"parameters": [
												"@concat('-t',item().RowKey)",
												"-sbronze",
												"-dsilver",
												"@concat('-v',item().PartitionKey)",
												"@concat('-k',item().Primary_Key)",
												"@concat('-j',item().Renaming_Instructions)",
												"@concat('-i',item().Incremental)",
												"@concat('-a',item().Validation_Instructions)"
											]
										},
										"linkedServiceName": {
											"referenceName": "LS_SMG_DBW",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Archive RAW Parquet Full Load",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Curate Parquet Full Load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "ParquetSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"wildcardFolderPath": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													},
													"wildcardFileName": "*.parquet",
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "ParquetReadSettings"
												}
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "processed",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Delete RAW Parquet Full Load",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Archive RAW Parquet Full Load",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_Archive_Parquet",
												"type": "DatasetReference",
												"parameters": {
													"pContainer": "landing",
													"pDirectory": {
														"value": "@concat('bronze/TOPSv2/',item().RowKey)",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Get Current Hour",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "vCurrentHour",
					"value": {
						"value": "@formatDateTime(convertFromUtc(utcNow(),'Pacific Standard Time'), 'HH')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"Server": {
				"type": "string",
				"defaultValue": "van-ss-sql15ag.seaspan.com"
			},
			"Database": {
				"type": "string",
				"defaultValue": "TOPSSEASPAN_PROD"
			},
			"Table": {
				"type": "string"
			},
			"Source_Schema": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"Source_fields": {
				"type": "string"
			},
			"pUsername": {
				"type": "string",
				"defaultValue": "PowerBIReader_SMCBITeam"
			},
			"pSecretname": {
				"type": "string",
				"defaultValue": "TOPS-Password"
			}
		},
		"variables": {
			"vnext_Watermark_End_LastUpdate_ts_Tables": {
				"type": "Array"
			},
			"vnext_Watermark_End_Other_Tables": {
				"type": "Array"
			},
			"watermark": {
				"type": "String"
			},
			"vCurrentHour": {
				"type": "String"
			}
		},
		"folder": {
			"name": "TOPSv2"
		},
		"annotations": [],
		"lastPublishTime": "2023-09-08T19:40:43Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}